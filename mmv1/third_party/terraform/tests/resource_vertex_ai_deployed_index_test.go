// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
)

func TestAccVertexAIDeployedIndex_vertexAiDeployedIndexExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project":       getTestProjectFromEnv(),
		"network_name":  BootstrapSharedTestNetwork(t, "vertex"),
		"random_suffix": randString(t, 10),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckVertexAIDeployedIndexDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccVertexAIDeployedIndex_vertexAiDeployedIndexExample(context),
			},
			{
				ResourceName:            "google_vertex_ai_deployed_index.deployed_index",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"region", "index_endpoint"},
			},
		},
	})
}

func testAccVertexAIDeployedIndex_vertexAiDeployedIndexExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_vertex_ai_index_endpoint" "index_endpoint" {
  display_name = "sample-endpoint"
  description  = "A sample vertex endpoint"
  region       = "us-central1"
  network      = "projects/${data.google_project.project.number}/global/networks/vertex-ai-manual-test-vpc-v2"
//   depends_on   = [
//     google_service_networking_connection.vertex_vpc_connection
//   ]
}

// resource "google_service_networking_connection" "vertex_vpc_connection" {
//   network                 = data.google_compute_network.vertex_network.id
//   service                 = "servicenetworking.googleapis.com"
//   reserved_peering_ranges = [google_compute_global_address.vertex_range.name]
// }

// resource "google_compute_global_address" "vertex_range" {
//   name          = "tf-test-address-name%{random_suffix}"
//   purpose       = "VPC_PEERING"
//   address_type  = "INTERNAL"
//   prefix_length = 24
//   network       = data.google_compute_network.vertex_network.id
// }

// data "google_compute_network" "vertex_network" {
//   name       = "%{network_name}"
// }

data "google_project" "project" {}


resource "google_storage_bucket" "bucket" {
  name     = "%{project}-tf-test-vertex-ai-index-test%{random_suffix}"  # Every bucket name must be globally unique
  location = "us-central1"
  uniform_bucket_level_access = true
}

# The sample data comes from the following link:
# https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
resource "google_storage_bucket_object" "data" {
  name   = "contents/data.json"
  bucket = google_storage_bucket.bucket.name
  content = <<EOF
{"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
{"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
EOF
}

resource "google_vertex_ai_index" "index" {
  region   = "us-central1"
  display_name = "tf-test-test-index%{random_suffix}"
  description = "index for test"
  metadata {
    contents_delta_uri = "gs://${google_storage_bucket.bucket.name}/contents"
    config {
      dimensions = 2
      approximate_neighbors_count = 150
      distance_measure_type = "DOT_PRODUCT_DISTANCE"
      algorithm_config {
        tree_ah_config {
          leaf_node_embedding_count = 500
          leaf_nodes_to_search_percent = 7
        }
      }
    }
  }
  index_update_method = "BATCH_UPDATE"
}

resource "google_vertex_ai_deployed_index" "deployed_index" {
    name = "test%{random_suffix}"
    index_endpoint = google_vertex_ai_index_endpoint.index_endpoint.id
    index = google_vertex_ai_index.index.id
}
`, context)
}

func testAccCheckVertexAIDeployedIndexDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_vertex_ai_deployed_index" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := googleProviderConfig(t)

			url, err := replaceVarsForTest(config, rs, "{{VertexAIBasePath}}{{index_endpoint}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			res, err := sendRequest(config, "GET", billingProject, url, config.userAgent, nil)
			if err != nil {
				return err
			}

			deployedIndexes, ok := res["deployedIndexes"].([]map[string]interface{})

			if !ok {
				return fmt.Errorf("Failed to get deployedIndexes")
			}

			if len(deployedIndexes) > 0 {
				return fmt.Errorf("VertexAIDeployedIndex still exists at %s", url)
			}
		}

		return nil
	}
}
