resource "google_vertex_ai_index_endpoint" "index_endpoint" {
  display_name = "sample-endpoint"
  description  = "A sample vertex endpoint"
  region       = "us-central1"
  # network      = "projects/${data.google_project.project.number}/global/networks/${data.google_compute_network.vertex_network.name}"
  depends_on   = [
    google_service_networking_connection.vertex_vpc_connection
  ]
}

# resource "google_service_networking_connection" "vertex_vpc_connection" {
#   network                 = data.google_compute_network.vertex_network.id
#   service                 = "servicenetworking.googleapis.com"
#   reserved_peering_ranges = [google_compute_global_address.vertex_range.name]
# }

# resource "google_compute_global_address" "vertex_range" {
#   name          = "<%= ctx[:vars]['address_name'] %>"
#   purpose       = "VPC_PEERING"
#   address_type  = "INTERNAL"
#   prefix_length = 24
#   network       = data.google_compute_network.vertex_network.id
# }

data "google_compute_network" "vertex_network" {
  name       = "<%= ctx[:vars]['network_name'] %>"
}

data "google_project" "project" {}


resource "google_storage_bucket" "bucket" {
  name     = "<%= ctx[:test_env_vars]['project'] %>-<%= ctx[:vars]['bucket_name'] %>"  # Every bucket name must be globally unique
  location = "us-central1"
  uniform_bucket_level_access = true
}

# The sample data comes from the following link:
# https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
resource "google_storage_bucket_object" "data" {
  name   = "contents/data.json"
  bucket = google_storage_bucket.bucket.name
  content = <<EOF
{"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
{"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
EOF
}

resource "google_vertex_ai_index" "index" {
  region   = "us-central1"
  display_name = "<%= ctx[:vars]['display_name'] %>"
  description = "index for test"
  metadata {
    contents_delta_uri = "gs://${google_storage_bucket.bucket.name}/contents"
    config {
      dimensions = 2
      approximate_neighbors_count = 150
      distance_measure_type = "DOT_PRODUCT_DISTANCE"
      algorithm_config {
        tree_ah_config {
          leaf_node_embedding_count = 500
          leaf_nodes_to_search_percent = 7
        }
      }
    }
  }
  index_update_method = "BATCH_UPDATE"
}

resource "google_vertex_ai_deployed_index" "<%= ctx[:primary_resource_id] %>" {
    name = "<%= ctx[:vars]['deployed_index_id'] %>"
    index_endpoint = google_vertex_ai_index_endpoint.index_endpoint.id
    index = google_vertex_ai_index.index.id
}
